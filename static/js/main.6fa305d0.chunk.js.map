{"version":3,"sources":["components/Search.js","components/ToDoHeader.js","components/ToDoFooter.js","components/ListItem.js","components/ListItems.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Search","onSearch","TextField","id","label","type","fullWidth","onChange","event","ToDoHeader","inputValue","onInputChange","onBtnClick","class","className","value","placeholder","onKeyDown","ev","key","ToDoFooter","onButtonClick","Button","onClick","COMPLETED","NOT_COMPLETED","divStyle","fontSize","display","justifyContent","alignItems","marginTop","padding","borderBottom","ListItem","props","toDo","done","style","FormControlLabel","control","Checkbox","checked","color","onCheckboxChange","name","IconButton","aria-label","onBtnRemove","ListItems","filteredItems","width","map","el","index","Main","useState","setInputValue","uniqueId","toDoItems","setTodoItems","filter","setFilter","searchedText","setSearchedText","searched","setSearch","setFilteredItems","useEffect","includes","target","newState","unshift","console","log","uptadedArray","findIndex","splice","array","currentToDo","find","currentTodoIndex","indexOf","string","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qRASaA,EAAS,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACpB,OAAQ,6BACJ,kBAACC,EAAA,EAAD,CAAWC,GAAG,kBAAkBC,MAAM,eAAeC,KAAK,SAASC,WAAW,EAAMC,SAAU,SAACC,GAC3FP,EAASO,QCPN,SAASC,EAAT,GAKX,IAJFC,EAIC,EAJDA,WACAC,EAGC,EAHDA,cACAC,EAEC,EAFDA,WACAX,EACC,EADDA,SAQA,OACE,yBAAKY,MAAM,cACT,wBAAIC,UAAU,UAAd,SACA,yBAAKD,MAAM,gBACX,kBAAC,EAAD,CAAQZ,SAAUA,IAClB,6BACA,kBAACC,EAAA,EAAD,CACEG,KAAK,OACLU,MAAOL,EACPJ,WAAW,EACXU,YAAY,yBACZT,SAAUI,EACVM,UAlBiB,SAACC,GACP,UAAXA,EAAGC,KAELP,S,aCDOQ,EAAa,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,cACxB,OAAO,yBAAKP,UAAU,iBAClB,kBAACQ,EAAA,EAAD,CAAQnB,GAAI,MAAOoB,QAAS,WACxBF,EAAc,SADlB,OAGA,kBAACC,EAAA,EAAD,CAAQnB,GAAI,YAAaoB,QAAS,WAC9BF,EAAcG,KADlB,aAIA,kBAACF,EAAA,EAAD,CAAQnB,GAAI,eAAgBoB,QAAS,WACjCF,EAAcI,KADlB,kB,4CChBFC,EAAW,CACfC,SAAU,GACVC,QAAS,OACTC,eAAgB,gBAChBC,WAAY,SACZC,UAAW,EACXC,QAAS,oBACTC,aAAc,qBAGHC,EAAW,SAACC,GAEvB,OACE,wBAAIrB,UAAWqB,EAAMC,KAAKC,KAFd,UAE+B,GAAIC,MAAOZ,GACpD,kBAACa,EAAA,EAAD,CACEC,QACE,kBAACC,EAAA,EAAD,CACEpC,KAAK,WACLqC,QAASP,EAAMC,KAAKC,KACpBM,MAAM,UACNpC,SAAU,WACR4B,EAAMS,iBAAiBT,EAAMC,KAAKjC,OAIxCC,MAAO+B,EAAMC,KAAKS,OAEpB,kBAACC,EAAA,EAAD,CACEC,aAAW,SACXxB,QAAS,WACPY,EAAMa,YAAYb,EAAMC,KAAKjC,MAG/B,kBAAC,IAAD,SCnCK8C,EAAY,SAAC,GAAsD,IAApDL,EAAmD,EAAnDA,iBAAkBM,EAAiC,EAAjCA,cAAeF,EAAkB,EAAlBA,YAC3D,OACE,wBAAIV,MAAO,CAAEa,MAAO,OAAQnB,QAAS,IAClCkB,EAAcE,KAAI,SAACC,EAAIC,GAAL,OACjB,kBAAC,EAAD,CACEnC,IAAKkC,EAAGlD,GACRA,GAAImD,EACJN,YAAaA,EACbZ,KAAMiB,EACNT,iBAAkBA,S,iBCLfpB,EAAY,YACZC,EAAgB,gBAGd,SAAS8B,IAAQ,IAAD,EACOC,mBAAS,IADhB,mBACtB9C,EADsB,KACV+C,EADU,OAEKD,mBAAS,CACzC,CAAEnB,MAAM,EAAOQ,KAAM,MAAO1C,GAAIuD,OAChC,CAAErB,MAAM,EAAOQ,KAAM,MAAO1C,GAAIuD,SAJL,mBAEtBC,EAFsB,KAEXC,EAFW,OAMDJ,mBAAS,IANR,mBAMtBK,EANsB,KAMdC,EANc,OAOWN,mBAAS,IAPpB,mBAOtBO,EAPsB,KAORC,EAPQ,OAQCR,mBAAS,IARV,mBAQtBS,EARsB,KAQZC,EARY,OASaV,mBAASG,GATtB,mBAStBT,EATsB,KASPiB,EATO,KAwG7B,OAxBAC,qBAAU,WACRD,EACER,EAAUE,QAAO,SAACR,GAChB,OAAIQ,IAAWrC,EArFC,aAsFVyC,EACKZ,EAAGhB,MAAQgB,EAAGR,KAAKwB,SAASN,GAE9BV,EAAGhB,KACDwB,IAAWpC,EA1FN,aA2FVwC,GACMZ,EAAGhB,MAAQgB,EAAGR,KAAKwB,SAASN,IAE9BV,EAAGhB,KA9FG,aAkGP4B,EACAZ,EAAGR,KAAKwB,SAASN,GAEnBV,QAGV,CAACQ,EAAQI,EAAUF,EAAcJ,IAGlC,yBAAK9C,MAAM,mBACT,kBAACJ,EAAD,CACEC,WAAYA,EACZC,cAjGgB,SAACH,GACrBiD,EAAcjD,EAAM8D,OAAOvD,QAiGvBH,WA9Fa,WACjB,IAAM2D,EAAQ,YAAOZ,GACjBjD,GACF6D,EAASC,QAAQ,CACf3B,KAAMnC,EACN2B,MAAM,EACNlC,GAAIuD,QAGRE,EAAaW,GACbd,EAAc,KAqFVxD,SA1CW,SAACO,GAChBiE,QAAQC,IAAIlE,EAAM8D,QAClBN,EAAgBxD,EAAM8D,OAAOvD,OAC7BmD,EAzEoB,eAkHlB,kBAAC,EAAD,CACEP,UAAWA,EACXT,cAAeA,EACfF,YAnFc,SAAC7C,GAEnB,IAAIwE,EAAY,YAAOhB,GACnBL,EAAQqB,EAAaC,WAAU,SAACvB,GAClC,OAAOA,EAAGlD,KAAOA,KAEnBwE,EAAaE,OAAOvB,EAAO,GAC3BM,EAAae,IA6ET/B,iBAvEmB,SAACzC,GACxB,IAAI2E,EAAK,YAAOnB,GACZoB,EAAcD,EAAME,MAAK,SAAC3B,GAC5B,OAAOA,EAAGlD,KAAOA,KAEf8E,EAAmBH,EAAMI,QAAQH,GACrCD,EAAMD,OAAOI,EAAkB,EAA/B,2BACKF,GADL,IAEE1C,MAAO0C,EAAY1C,QAErBuB,EAAakB,MA+DX,kBAAC,EAAD,CAAYzD,cAzDM,SAAC8D,GACrBrB,EAAUqB,OChECC,MANf,WACE,OACE,kBAAC7B,EAAD,OCMgB8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.6fa305d0.chunk.js","sourcesContent":["import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n\r\n// export default function Search() {\r\n    \r\n// }\r\n\r\n\r\nexport const Search = ({onSearch}) => {\r\n    return (<div>\r\n        <TextField id=\"standard-search\" label=\"Search field\" type=\"search\" fullWidth={true} onChange={(event)=>{\r\n            onSearch(event);\r\n        }}/>\r\n        </div>\r\n        )\r\n} \r\n\r\n","import React from \"react\";\r\nimport { Search } from \"./Search\";\r\nimport \"../App.css\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nexport default function ToDoHeader({\r\n  inputValue,\r\n  onInputChange,\r\n  onBtnClick,\r\n  onSearch,\r\n}) {\r\n  const isEnterPressed = (ev) => {\r\n    if (ev.key === \"Enter\") {\r\n      //const {onBtnClick}=this.props;\r\n      onBtnClick();\r\n    }\r\n  };\r\n  return (\r\n    <div class=\"toDoHeader\">\r\n      <h2 className=\"header\">ToDos</h2>\r\n      <div class=\"inputWrapper\">\r\n      <Search onSearch={onSearch} />\r\n      <br/> \r\n      <TextField\r\n        type=\"text\"\r\n        value={inputValue}\r\n        fullWidth={true}\r\n        placeholder=\"What needs to be done?\"\r\n        onChange={onInputChange}\r\n        onKeyDown={isEnterPressed}\r\n      />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// export default class ToDoHeader extends Component {\r\n//     isEnterPressed=(ev)=>{\r\n//         if(ev.key===\"Enter\"){\r\n//             const {onBtnClick}=this.props;\r\n//             onBtnClick()\r\n//         }\r\n//     }\r\n//     render() {\r\n//         return (<div>\r\n//             <h2>This is To Do header</h2>\r\n//             <input type=\"text\" value={this.props.inputValue} onChange={this.props.onInputChange} onKeyDown={this.isEnterPressed}/>\r\n//             <button type=\"button\" onClick={this.props.onBtnClick}>Add</button>\r\n//             <Search onSearch={this.props.onSearch}/>\r\n//         </div>)\r\n//     }\r\n// }\r\n","import React from \"react\";\r\nimport {COMPLETED,NOT_COMPLETED} from \"./Main\"\r\nimport Button from '@material-ui/core/Button';\r\nimport \"../App.css\";\r\n\r\n\r\n\r\n// export default function ToDoFooter() {\r\n    \r\n// }\r\n\r\n\r\n\r\nexport const ToDoFooter = ({onButtonClick})=>{\r\n    return <div className=\"footerWrapper\">\r\n        <Button id={\"All\"} onClick={() => {\r\n            onButtonClick(\"All\");\r\n        }}>All</Button>\r\n        <Button id={\"Completed\"} onClick={() => {\r\n            onButtonClick(COMPLETED);\r\n            }\r\n        }>Completed</Button>\r\n        <Button id={\"NotCompleted\"} onClick={() => {\r\n            onButtonClick(NOT_COMPLETED);\r\n            }\r\n        }>NotCompleted</Button>\r\n        </div>\r\n} ","import React from \"react\";\r\nimport { IconButton } from \"@material-ui/core\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\n\r\nconst divStyle = {\r\n  fontSize: 20,\r\n  display: \"flex\",\r\n  justifyContent: \"space-between\",\r\n  alignItems: \"center\",\r\n  marginTop: 5,\r\n  padding: \"8px 16px 8px 32px\",\r\n  borderBottom: \"1px solid #cccccc\"\r\n};\r\n\r\nexport const ListItem = (props) => {\r\n  let checked = \"checked\";\r\n  return (\r\n    <li className={props.toDo.done ? checked : \"\"} style={divStyle}>\r\n      <FormControlLabel\r\n        control={\r\n          <Checkbox\r\n            type=\"checkbox\"\r\n            checked={props.toDo.done}\r\n            color=\"primary\"\r\n            onChange={() => {\r\n              props.onCheckboxChange(props.toDo.id);\r\n            }}\r\n          />\r\n        }\r\n        label={props.toDo.name}\r\n      />\r\n      <IconButton\r\n        aria-label=\"delete\"\r\n        onClick={() => {\r\n          props.onBtnRemove(props.toDo.id);\r\n        }}\r\n      >\r\n        <CloseIcon />\r\n      </IconButton>\r\n    </li>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { ListItem } from \"./ListItem\";\r\n//import { ReactComponent } from \"*.svg\";\r\n\r\nexport const ListItems = ({ onCheckboxChange, filteredItems, onBtnRemove }) => {\r\n  return (\r\n    <ul style={{ width: \"100%\", padding: 0 }}>\r\n      {filteredItems.map((el, index) => (\r\n        <ListItem\r\n          key={el.id}\r\n          id={index}\r\n          onBtnRemove={onBtnRemove}\r\n          toDo={el}\r\n          onCheckboxChange={onCheckboxChange}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ToDoHeader from \"./ToDoHeader\";\r\nimport { ToDoFooter } from \"./ToDoFooter\";\r\nimport { ListItems } from \"./ListItems\";\r\nimport \"../App.css\";\r\n\r\nimport uniqueId from \"uniqid\";\r\n\r\nexport const COMPLETED = \"COMPLETED\";\r\nexport const NOT_COMPLETED = \"NOT_COMPLETED\";\r\nexport const SEARCHED = \"SEARCHED\";\r\n\r\nexport default function Main() {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [toDoItems, setTodoItems] = useState([\r\n    { done: false, name: \"asd\", id: uniqueId() },\r\n    { done: false, name: \"dsa\", id: uniqueId() },\r\n  ]);\r\n  const [filter, setFilter] = useState(\"\");\r\n  const [searchedText, setSearchedText] = useState(\"\");\r\n  const [searched, setSearch] = useState(\"\");\r\n  const [filteredItems, setFilteredItems] = useState(toDoItems);\r\n\r\n  const onInputChange = (event) => {\r\n    setInputValue(event.target.value);\r\n  };\r\n\r\n  const onBtnClick = () => {\r\n    const newState = [...toDoItems];\r\n    if (inputValue) {\r\n      newState.unshift({\r\n        name: inputValue,\r\n        done: false,\r\n        id: uniqueId(),\r\n      });\r\n    }\r\n    setTodoItems(newState);\r\n    setInputValue(\"\");\r\n    // this.setState({\r\n    //     toDoItems: newState,\r\n    //     inputValue: \"\",\r\n    // })\r\n  };\r\n\r\n  const onBtnRemove = (id) => {\r\n    debugger;\r\n    let uptadedArray = [...toDoItems];\r\n    let index = uptadedArray.findIndex((el) => {\r\n      return el.id === id;\r\n    });\r\n    uptadedArray.splice(index, 1);\r\n    setTodoItems(uptadedArray);\r\n    // this.setState({\r\n    //     toDoItems : uptadedArray,\r\n    // })\r\n  };\r\n\r\n  const onCheckboxChange = (id) => {\r\n    let array = [...toDoItems];\r\n    let currentToDo = array.find((el) => {\r\n      return el.id === id;\r\n    });\r\n    let currentTodoIndex = array.indexOf(currentToDo);\r\n    array.splice(currentTodoIndex, 1, {\r\n      ...currentToDo,\r\n      done: !currentToDo.done,\r\n    });\r\n    setTodoItems(array);\r\n    // this.setState({\r\n    //     toDoItems: array,\r\n    // })\r\n  };\r\n\r\n  const onButtonClick = (string) => {\r\n    setFilter(string);\r\n    //             this.setState({\r\n    //                 filter: string,\r\n    //             })\r\n  };\r\n\r\n  const onSearch = (event) => {\r\n    console.log(event.target);\r\n    setSearchedText(event.target.value);\r\n    setSearch(SEARCHED);\r\n    //             debugger;\r\n    //             console.log(event.target.value);\r\n    //             this.setState({\r\n    //                 searchedText: event.target.value,\r\n    //                 searched: SEARCHED,\r\n    //             })\r\n  };\r\n\r\n  useEffect(() => {\r\n    setFilteredItems(\r\n      toDoItems.filter((el) => {\r\n        if (filter === COMPLETED) {\r\n          if (searched === SEARCHED) {\r\n            return el.done && el.name.includes(searchedText);\r\n          }\r\n          return el.done;\r\n        } else if (filter === NOT_COMPLETED) {\r\n          if (searched === SEARCHED) {\r\n            return !el.done && el.name.includes(searchedText);\r\n          }\r\n          return !el.done;\r\n        } //else if(filter === SEARCHED){\r\n        // return el.name.includes(searchedText)\r\n        //}\r\n        else if (searched === SEARCHED) {\r\n          return el.name.includes(searchedText);\r\n        }\r\n        return el;\r\n      })\r\n    );\r\n  }, [filter, searched, searchedText, toDoItems]);\r\n\r\n  return (\r\n    <div class=\"wrapperDivStyle\">\r\n      <ToDoHeader\r\n        inputValue={inputValue}\r\n        onInputChange={onInputChange}\r\n        onBtnClick={onBtnClick}\r\n        onSearch={onSearch}\r\n      />\r\n      <ListItems\r\n        toDoItems={toDoItems}\r\n        filteredItems={filteredItems}\r\n        onBtnRemove={onBtnRemove}\r\n        onCheckboxChange={onCheckboxChange}\r\n      />\r\n      <ToDoFooter onButtonClick={onButtonClick} />\r\n    </div>\r\n  );\r\n}\r\n\r\n// import React from 'react';\r\n// import {ListItems} from \"./ListItems\";\r\n// import ToDoHeader from \"./ToDoHeader\";\r\n// import uniqueId from \"uniqid\";\r\n// import {ToDoFooter} from \"./ToDoFooter\"\r\n// import AppHeader from \"./AppHeader\";\r\n// //import ThemeContext from \"../contexts/ThemeContext\";\r\n// import { DARK_THEME_STYLES, LIGHT_THEME_STYLES } from '../constants/style';\r\n\r\n// export const COMPLETED = \"COMPLETED\";\r\n// export const NOT_COMPLETED = \"NOT_COMPLETED\";\r\n// export const SEARCHED = \"SEARCHED\"\r\n\r\n// const wrapperDivStyle = {\r\n//     width: '60%',\r\n//     margin: '0 auto',\r\n//     padding: 0,\r\n//     display: 'flex',\r\n//     flexDirection: 'column',\r\n//     justifyContent: 'flex-start',\r\n//     alignItems: 'center',\r\n//     height: '100vh',\r\n// }\r\n\r\n// class Main extends React.Component{\r\n\r\n//     state = {\r\n//         themeName: \"dark\",\r\n//         inputValue: \"\",\r\n//         toDoItems: [{ done : false, name : \"asd\", id : uniqueId()}, {done: false, name :\"dsa\", id : uniqueId()}],\r\n//         filter: \"\",\r\n//         searchedText: \"\",\r\n//         searched: \"\",\r\n//     };\r\n\r\n//     onBtnClick = () => {\r\n//         const newState = [...this.state.toDoItems];\r\n//         if (this.state.inputValue) {\r\n//             newState.unshift({\r\n//                 name: this.state.inputValue,\r\n//                 done: false,\r\n//                 id: uniqueId()\r\n//             });\r\n//         }\r\n//         this.setState({\r\n//             toDoItems: newState,\r\n//             inputValue: \"\",\r\n//         })\r\n//     };\r\n\r\n//     onInputChange = (event) => {\r\n//         this.setState({\r\n//             inputValue: event.target.value\r\n//         });\r\n//     };\r\n\r\n//     onBtnRemove = (id) => {\r\n//         debugger;\r\n//         let uptadedArray = [...this.state.toDoItems];\r\n//         let index = uptadedArray.findIndex((el) => {\r\n//             return el.id === id;\r\n//         })\r\n//         uptadedArray.splice(index, 1);\r\n//         this.setState({\r\n//             toDoItems : uptadedArray,\r\n//         })\r\n//     }\r\n\r\n//     onCheckboxChange = (id) => {\r\n//         let array = [...this.state.toDoItems];\r\n//         let currentToDo = array.find((el) => {\r\n//             return el.id === id;\r\n//         })\r\n//         let currentTodoIndex = array.indexOf(currentToDo);\r\n//         array.splice(currentTodoIndex, 1, {\r\n//             ...currentToDo,\r\n//             done: !currentToDo.done,\r\n//         })\r\n//         this.setState({\r\n//             toDoItems: array,\r\n//         })\r\n//     }\r\n\r\n//         onButtonClick = (string) => {\r\n//             debugger;\r\n//             this.setState({\r\n//                 filter: string,\r\n//             })\r\n//         }\r\n\r\n//         onSearch = (event) => {\r\n//             debugger;\r\n//             console.log(event.target.value);\r\n//             this.setState({\r\n//                 searchedText: event.target.value,\r\n//                 searched: SEARCHED,\r\n//             })\r\n\r\n//         }\r\n\r\n//         changeTheme = (value) => {\r\n//             this.setState({\r\n//                 themeName: value\r\n//             })\r\n//         };\r\n\r\n//     render() {\r\n//         const themeStyle = this.state.themeName === 'dark' ? DARK_THEME_STYLES : LIGHT_THEME_STYLES;\r\n//         const {toDoItems,filter,searchedText,searched} = this.state;\r\n//         const filteredItems = toDoItems.filter((el) => {\r\n//             if (filter === COMPLETED){\r\n//                 if(searched === SEARCHED){\r\n//                     return el.done && el.name.includes(searchedText)\r\n//                 }\r\n//                return el.done\r\n//             } else if(filter === NOT_COMPLETED){\r\n//                 if(searched === SEARCHED){\r\n//                     return !el.done && el.name.includes(searchedText)\r\n//                 }\r\n//                 return !el.done\r\n//              } //else if(filter === SEARCHED){\r\n//                 // return el.name.includes(searchedText)\r\n//              //}\r\n//              else if(searched === SEARCHED){\r\n//                  return el.name.includes(searchedText);\r\n//              }\r\n//              return el\r\n//         })\r\n//         return (\r\n//            // <ThemeContext.Provider value = {this.state.themeName}>\r\n//             <div style={{\r\n//                 ...wrapperDivStyle,\r\n//                 ...themeStyle,\r\n//             }}>\r\n//                 <AppHeader changeTheme = {this.changeTheme}/>\r\n//                 <ToDoHeader inputValue={this.state.inputValue} onInputChange={this.onInputChange} onBtnClick={this.onBtnClick} onSearch={this.onSearch}/>\r\n//                 <ListItems toDoItems={this.state.toDoItems} filteredItems={filteredItems} onBtnRemove={this.onBtnRemove}\r\n//                     onCheckboxChange={this.onCheckboxChange} />\r\n//                 <ToDoFooter onButtonClick={this.onButtonClick}/>\r\n//             </div>\r\n//             //</ThemeContext.Provider>\r\n//         );\r\n//     }\r\n// }\r\n\r\n//export default Main;\r\n","import React from 'react';\nimport './App.css';\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n    <Main/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}